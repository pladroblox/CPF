install.packages("RMySQL")
install.packages("DBI")
library(DBI)
library(RMySQL)
con <- dbConnect(MySQL(), user="root",dbname="form")
dbExistsTable(con, "tableform")
dbExistsTable(con, "site")
sql_command <- paste("INSERT into tableform(id,name,age,marks) VALUES (' ','",prasad,"','",22,"','",95,"');", sep = "")
sql_command <- paste("INSERT into tableform(id,name,age,marks) VALUES (' ','",name,"','",age,"','",marks,"');", sep = "")
name<-"xyz"
age<-18
marks<-95
sql_command <- paste("INSERT into tableform(id,name,age,marks) VALUES (' ','",name,"','",age,"','",marks,"');", sep = "")
sql_command <- paste("INSERT into site(id,name,age,marks) VALUES (' ','",name,"','",age,"','",marks,"');", sep = "")
rs<-dbSendQuery(con,sql_command)
df<- fetch(rs,n=-1)
all_cons <- dbListConnections(MySQL())
dbClearResult(rs)
for(con in all_cons)
library(DBI)
library(RMySQL)
name<-args[1]
args <- commandArgs(trailingOnly=TRUE)
name<-args[1]
age<-as.integer(args[2])
marks<-as.integer(args[3])
con <- dbConnect(MySQL(), user="root",dbname="form")
dbExistsTable(con, "site")
sql_command <- paste("INSERT into site(id,name,age,marks) VALUES (' ','",name,"','",age,"','",marks,"');", sep = "")
rs<-dbSendQuery(con,sql_command)
q()
data<-read.csv("C:/Users/admin/Documents/sies.csv")
data
plot(data$year,data$extc,type="o")
plot(data$year,data$extc,data$it,type="o")
plot(data$year,data$extc,data$it,type="o")
plot(data,type="o")
plot(data$year,data$extc,type="h")
plot(data)
plot(data$year,data$extc,type="b")
plot(data$year,data$extc,type="p")
plot(data$year,data$extc,type="s")
library("graphics", lib.loc="C:/Program Files/R/R-3.3.3/library")
library("grDevices", lib.loc="C:/Program Files/R/R-3.3.3/library")
plot.function(data)
plot.default(data)
plot.design(data)
plot.ecdf(data)
plot.spec.phase(data)
plot.(data)
plot.new(data)
data<-read.csv("C:/Users/admin/Documents/sies.csv")
data
plot.new(data)
plot.new()
require(grDevices) # for colours
tN <- table(Ni <- stats::rpois(100, lambda = 5))
r <- barplot(tN, col = rainbow(20))
#- type = "h" plotting *is* 'bar'plot
lines(r, tN, type = "h", col = "red", lwd = 2)
barplot(tN, space = 1.5, axisnames = FALSE,
sub = "barplot(..., space= 1.5, axisnames = FALSE)")
barplot(VADeaths, plot = FALSE)
barplot(VADeaths, plot = FALSE, beside = TRUE)
mp <- barplot(VADeaths) # default
tot <- colMeans(VADeaths)
text(mp, tot + 3, format(tot), xpd = TRUE, col = "blue")
barplot(VADeaths, beside = TRUE,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"),
legend = rownames(VADeaths), ylim = c(0, 100))
title(main = "Death Rates in Virginia", font.main = 4)
hh <- t(VADeaths)[, 5:1]
mybarcol <- "gray20"
mp <- barplot(hh, beside = TRUE,
col = c("lightblue", "mistyrose",
"lightcyan", "lavender"),
legend = colnames(VADeaths), ylim = c(0,100),
main = "Death Rates in Virginia", font.main = 4,
sub = "Faked upper 2*sigma error bars", col.sub = mybarcol,
cex.names = 1.5)
segments(mp, hh, mp, hh + 2*sqrt(1000*hh/100), col = mybarcol, lwd = 1.5)
stopifnot(dim(mp) == dim(hh))  # corresponding matrices
mtext(side = 1, at = colMeans(mp), line = -2,
text = paste("Mean", formatC(colMeans(hh))), col = "red")
# Bar shading example
barplot(VADeaths, angle = 15+10*1:5, density = 20, col = "black",
legend = rownames(VADeaths))
title(main = list("Death Rates in Virginia", font = 4))
# border :
barplot(VADeaths, border = "dark blue")
# log scales (not much sense here):
barplot(tN, col = heat.colors(12), log = "y")
barplot(tN, col = gray.colors(20), log = "xy")
# args.legend
barplot(height = cbind(x = c(465, 91) / 465 * 100,
y = c(840, 200) / 840 * 100,
z = c(37, 17) / 37 * 100),
beside = FALSE,
width = c(465, 840, 37),
col = c(1, 2),
legend.text = c("A", "B"),
args.legend = list(x = "topleft"))
barplot(sies, plot = FALSE)
data<-read.csv("C:/Users/admin/Documents/sies.csv")
data
barplot(data, plot = FALSE)
barplot(data, plot = FALSE, beside = TRUE)
data<-read.csv("C:/Users/admin/Documents/sies.csv")
data
plot(data$year,data$extc,type="s")
require(stats)
plot.design(warpbreaks)  # automatic for data frame with one numeric var.
Form <- breaks ~ wool + tension
summary(fm1 <- aov(Form, data = warpbreaks))
plot.design(       Form, data = warpbreaks, col = 2)  # same as above
## More than one y :
utils::str(esoph)
plot.design(esoph) ## two plots; if interactive you are "ask"ed
op <- par(mfcol = 1:2)
plot.design(ncases/ncontrols ~ ., data = esoph, ylim = c(0, 0.8))
plot.design(ncases/ncontrols ~ ., data = esoph, ylim = c(0, 0.8),
fun = median)
par(op)
require(stats) # for lowess, rpois, rnorm
plot(cars)
lines(lowess(cars))
plot(sin, -pi, 2*pi) # see ?plot.function
## Discrete Distribution Plot:
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
## Simple quantiles/ECDF, see ecdf() {library(stats)} for a better one:
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
plot(x <- sort(rnorm(47)), type = "h", main = "plot(x, type = \"s\")")
plot(x <- sort(rnorm(47)), type = "0", main = "plot(x, type = \"s\")")
plot(x <- sort(rnorm(47)), type = "o", main = "plot(x, type = \"s\")")
plot(x <- sort(rnorm(15)), type = "o", main = "plot(x, type = \"s\")")
plot(data)
lines(lowess(data))
plot(sin, -pi, 2*pi) # see ?plot.function
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(x <- sort(rnorm(15)), type = "o", main = "plot(x, type = \"s\")")
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(data(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(data()), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(x <- sort(rnorm(15)), type = "o", main = "plot(x, type = \"s\")")
plot(table(rpois(10, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(rpois(15, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(rpois(1, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(data(5, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(data(year,extc)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(data, type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(10,5,type=h)
plot(10,5,type="h")
plot(data$year,data$extc,type="h")
plot(data,type="o")
plot(data$year,data$extc,type="h",main="extc")
plot(data$year,data$it,type="h",main="extc")
detach("package:graphics", unload=TRUE)
library("graphics", lib.loc="C:/Program Files/R/R-3.3.3/library")
library("grid", lib.loc="C:/Program Files/R/R-3.3.3/library")
plot(data$year,data$it,type="h",main="extc")
library("xlsx", lib.loc="~/R/win-library/3.3")
library("stats", lib.loc="C:/Program Files/R/R-3.3.3/library")
## see ?gam.vcomp
require(mgcv)
## simulate simple random effect example
set.seed(4)
nb <- 50; n <- 400
b <- rnorm(nb)*2 ## random effect
r <- sample(1:nb,n,replace=TRUE) ## r.e. levels
y <- 2 + b[r] + rnorm(n)
r <- factor(r)
## fit model....
b <- gam(y ~ s(r,bs="re"),method="REML")
gam.vcomp(b)
## example with supplied precision matrices...
b <- c(rnorm(nb/2)*2,rnorm(nb/2)*.5) ## random effect now with 2 variances
r <- sample(1:nb,n,replace=TRUE) ## r.e. levels
y <- 2 + b[r] + rnorm(n)
r <- factor(r)
## known precision matrix components...
S <- list(diag(rep(c(1,0),each=nb/2)),diag(rep(c(0,1),each=nb/2)))
b <- gam(y ~ s(r,bs="re",xt=list(S=S,rank=c(nb/2,nb/2))),method="REML")
gam.vcomp(b)
summary(b)
detach("package:mgcv", unload=TRUE)
library("mgcv", lib.loc="C:/Program Files/R/R-3.3.3/library")
## see ?gam.vcomp
require(mgcv)
## simulate simple random effect example
set.seed(4)
nb <- 50; n <- 400
b <- rnorm(nb)*2 ## random effect
r <- sample(1:nb,n,replace=TRUE) ## r.e. levels
y <- 2 + b[r] + rnorm(n)
r <- factor(r)
## fit model....
b <- gam(y ~ s(r,bs="re"),method="REML")
gam.vcomp(b)
## example with supplied precision matrices...
b <- c(rnorm(nb/2)*2,rnorm(nb/2)*.5) ## random effect now with 2 variances
r <- sample(1:nb,n,replace=TRUE) ## r.e. levels
y <- 2 + b[r] + rnorm(n)
r <- factor(r)
## known precision matrix components...
S <- list(diag(rep(c(1,0),each=nb/2)),diag(rep(c(0,1),each=nb/2)))
b <- gam(y ~ s(r,bs="re",xt=list(S=S,rank=c(nb/2,nb/2))),method="REML")
gam.vcomp(b)
summary(b)
install.packages("plot")
plot(data$year,data$it,type="h",main="extc")
??plot(data$year,data$it,type="h",main="extc")
require(stats)
plot.design(warpbreaks)  # automatic for data frame with one numeric var.
Form <- breaks ~ wool + tension
summary(fm1 <- aov(Form, data = warpbreaks))
plot.design(       Form, data = warpbreaks, col = 2)  # same as above
## More than one y :
utils::str(esoph)
plot.design(esoph) ## two plots; if interactive you are "ask"ed
op <- par(mfcol = 1:2)
plot.design(ncases/ncontrols ~ ., data = esoph, ylim = c(0, 0.8))
plot.design(ncases/ncontrols ~ ., data = esoph, ylim = c(0, 0.8),
fun = median)
par(op)
require(stats)
plot.design(warpbreaks)  # automatic for data frame with one numeric var.
plot.design(data)  # automatic for data frame with one numeric var.
Form <- breaks ~ wool + tension
summary(fm1 <- aov(Form, data = warpbreaks))
plot.design(       Form, data = warpbreaks, col = 2)  # same as above
utils::str(esoph)
plot.design(esoph) ## two plots; if interactive you are "ask"ed
op <- par(mfcol = 1:2)
plot.design(ncases/ncontrols ~ ., data = esoph, ylim = c(0, 0.8))
plot.design(ncases/ncontrols ~ ., data = esoph, ylim = c(0, 0.8),
fun = median)
par(op)
par(op)
data<-read.csv("C:/Users/admin/Documents/sies.csv")
data
plot(data$year,data$it,type="h",main="extc")
plot(data,type="o")
plot.new()
plot(data$year,data$it,type="h",main="extc")
data<-read.csv("C:/Users/admin/Documents/sies.csv")
data
plot(data$year,data$it,type="h",main="extc")
sql_command <- "SELECT name,age,marks FROM site"
rs<-dbSendQuery(con,sql_command)
library(DBI)
library(RMySQL)
name<-"xyz"
age<-18
marks<-95
con <- dbConnect(MySQL(), user="root",dbname="form")
dbExistsTable(con, "site")
sql_command <- paste("INSERT into site(id,name,age,marks) VALUES (' ','",name,"','",age,"','",marks,"');", sep = "")
rs<-dbSendQuery(con,sql_command)
df<- fetch(rs,n=-1)
all_cons <- dbListConnections(MySQL())
df
con <- dbConnect(MySQL(), user="root",dbname="form")
dbExistsTable(con, "tableform")
sql_command <- "SELECT name,age,marks FROM site"
rs<-dbSendQuery(con,sql_command)
df<- fetch(rs,n=-1)
df
plot(df$age,df$marks,type="h",main="extc")
dd <- plot(df$age,df$marks,type="h",main="extc")
sql_command <- paste("INSERT into graph(pp) VALUES ('dd','",,"','",,"','",,"');", sep = "")
sql_command <- paste("INSERT into graph(pp) VALUES ('dd',"');", sep = "")
all_cons <- dbListConnections(MySQL())
dbClearResult(rs)
for(con in all_cons)
dbDisconnect(con)
q()
sql_command <- paste("INSERT into graph(pp) VALUES ('dd',"'))
all_cons <- dbListConnections(MySQL())
dbClearResult(rs)
for(con in all_cons)
dbDisconnect(con)
q()
library("ggplot2", lib.loc="~/R/win-library/3.3")
library(DBI)
library(RMySQL)
args <- commandArgs(trailingOnly=TRUE)
query <- args[1]
query
con <- dbConnect(MySQL(), user="root",dbname="form")
dbExistsTable(con, "sies")
sql_command <- "SELECT branch,year,percentage FROM sies"
rs<-dbSendQuery(con,sql_command)
data<- fetch(rs,n=-1)
data
setwd("C:/xampp/htdocs/rstudio")
png(filename="new.png", width=500, height=500)
ggplot(data, aes(factor(year), percentage, fill = branch)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
dev.off()
library(DBI)
library(RMySQL)
args <- commandArgs(trailingOnly=TRUE)
query <- args[1]
query <- 1
if(query == 1)
{
con <- dbConnect(MySQL(), user="root",dbname="form")
dbExistsTable(con, "sies")
sql_command <- "SELECT branch,year,percentage FROM sies"
rs<-dbSendQuery(con,sql_command)
data<- fetch(rs,n=-1)
data
setwd("C:/xampp/htdocs/rstudio")
png(filename="new.png", width=500, height=500)
ggplot(data, aes(factor(year), percentage, fill = branch)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
dev.off()
install.packages("ggplot2")
all_cons <- dbListConnections(MySQL())
dbClearResult(rs)
for(con in all_cons)
dbDisconnect(con)
}
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.3")
ggplot(data, aes(factor(year), percentage, fill = branch)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
con <- dbConnect(MySQL(), user="root",dbname="form")
dbExistsTable(con, "sies")
sql_command <- "SELECT branch,year,percentage FROM sies"
rs<-dbSendQuery(con,sql_command)
data<- fetch(rs,n=-1)
data
setwd("C:/xampp/htdocs/rstudio")
png(filename="new.png", width=500, height=500)
ggplot(data, aes(factor(year), percentage, fill = branch)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
dev.off()
png(filename="new.png", width=500, height=500)
ggplot(data, aes(factor(year), percentage, fill = branch)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
dev.off()
con <- dbConnect(MySQL(), user="root",dbname="form")
dbExistsTable(con, "sies")
sql_command <- "SELECT branch,year,percentage FROM dy"
rs<-dbSendQuery(con,sql_command)
data<- fetch(rs,n=-1)
data
setwd("C:/xampp/htdocs/rstudio")
png(filename="new.png", width=500, height=500)
ggplot(data, aes(factor(year), percentage, fill = branch)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
ggplot(data, aes(factor(year), percentage, fill = branch)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.3")
ggplot(data, aes(factor(year), percentage, fill = branch)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
dbExistsTable(con, "dy")
